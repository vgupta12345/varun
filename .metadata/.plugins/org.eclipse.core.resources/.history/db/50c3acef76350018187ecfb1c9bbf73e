package com.nordea.gol;

import java.util.Scanner;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

import com.nordea.gol.service.MatrixGenerationService;
import com.nordea.gol.service.NextGenerationService;
import com.nordea.gol.utils.GameOfLifeUtils;

@SpringBootApplication
public class GameOfLifeApplication {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(GameOfLifeApplication.class);


	public static void main(String[] args) {
		SpringApplication.run(GameOfLifeApplication.class, args);
		ApplicationContext ctx = SpringApplication.run(GameOfLifeApplication.class, args);

		if(args.length > 0) {
			String maxGeneration = args[0];
			LOGGER.info("Enter maximum number of generations: " + args[0]);
		}

		// prompt for the max number of generations
		
		String[][] cellMatrix = null;
		int currentGeneration = 0;

		try {
			
			MatrixGenerationService matrixGenerationService = ctx.getBean(MatrixGenerationService.class);
			cellMatrix = matrixGenerationService.generateCellMatrix();

		} catch (ArrayIndexOutOfBoundsException e) {
			LOGGER.error("Input parameters dont match file contents. Please specify right parameters");
		}

		while (null != cellMatrix && currentGeneration < maxGeneration) {
			GameOfLifeUtils.printCellMatrix(cellMatrix);
			LOGGER.info("  Current generation   " + (++currentGeneration));
			GameOfLifeUtils.clearScreen();

			NextGenerationService nextGenerationService = ctx.getBean(NextGenerationService.class);
			String[][] nextGenGrid = nextGenerationService.nextGen(cellMatrix);

			// copy grid with new generations to the one
			// previously created
			cellMatrix = GameOfLifeUtils.copyGrid(nextGenGrid);

			// wait 200 milliseconds before repeating the loop
			try {
				Thread.sleep(100);
			} catch (InterruptedException ex) {
				Thread.currentThread().interrupt();
			}
		}

	}
}
