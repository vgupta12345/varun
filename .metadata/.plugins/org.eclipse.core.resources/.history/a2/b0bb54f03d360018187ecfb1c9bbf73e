package com.nordea.gol;

import java.util.InputMismatchException;
import java.util.Scanner;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

import com.nordea.gol.service.MatrixGenerationService;
import com.nordea.gol.service.NextGenerationService;
import com.nordea.gol.utils.GameOfLifeUtils;

@SpringBootApplication
public class GameOfLifeApplication {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(GameOfLifeApplication.class);

	//Add java docs 
	//test cases
	//Autowiring
	//Design patterns
	//Comments
	public static void main(String[] args) {
		SpringApplication.run(GameOfLifeApplication.class, args);
		ApplicationContext ctx = SpringApplication.run(GameOfLifeApplication.class, args);

		int maxGeneration = getMaxGeneration();
		String[][] cellMatrix = null;
		int currentGeneration = 0;

		try {
			MatrixGenerationService matrixGenerationService = ctx.getBean(MatrixGenerationService.class);
			cellMatrix = matrixGenerationService.generateCellMatrix();
		} catch (ArrayIndexOutOfBoundsException e) {
			LOGGER.error("NUMBER_OF_ROWS or NUMBER_OF_COLUMNS does not match file contents. Please specify correct values of NUMBER_OF_ROWS and NUMBER_OF_COLUMNS");
			return;
		}

		// check if cell matrxi is blank  null != cellMatrix && 
		while (currentGeneration < maxGeneration) {
			GameOfLifeUtils.printCellMatrix(cellMatrix);
			LOGGER.info("  Current generation   " + (++currentGeneration));
			GameOfLifeUtils.clearScreen();

			NextGenerationService nextGenerationService = ctx.getBean(NextGenerationService.class);
			String[][] nextGenGrid = nextGenerationService.nextGenerationMatrix(cellMatrix);

			// copy grid with new generations to the one previously created
			cellMatrix = GameOfLifeUtils.copyGrid(nextGenGrid);

	
		}

	}


	private static int getMaxGeneration() {
		
		// create a scanner so we can read the command-line input
		Scanner scanner = null;
		int maxGeneration=0;

		try {
			scanner = new Scanner(System.in);
			// prompt for the max number of generations
			LOGGER.info("Enter maximum number of generations: ");
			// get their input as max number of generations
			maxGeneration = scanner.nextInt();
			
		}catch(IllegalArgumentException  illegalArgumentException ) {
			LOGGER.error("Please enter a number as maximum number of generations: " + illegalArgumentException);
			
		}catch(InputMismatchException  inputMismatchException ) {
			LOGGER.error("Please enter a number as maximum number of generations: " + inputMismatchException);
			
		}
		finally {
			if(scanner!=null)
		        scanner.close();
		}
		

		return maxGeneration;
	}
}
