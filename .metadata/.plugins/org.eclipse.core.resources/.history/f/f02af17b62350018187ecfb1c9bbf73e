package com.nordea.gol.service;

import java.util.ArrayList;
import java.util.List;

import com.nordea.gol.constants.GameOfLifeConstants;
import com.nordea.gol.utils.GameOfLifeUtils;

public class NextGenerationService {
	
	public  String[][] nextGen(String[][] grid) {
		String[][] nextGenGrid = GameOfLifeUtils.copyGrid(grid);

		for (int i = 0; i < grid.length; i++) {
			for (int j = 0; j < grid[i].length; j++) {
				// System.out.println(grid[i][j] + " " + i + ":" + j);

				int life_forms = 0;

				List<String> neighbors = new ArrayList<String>();

				// find the neighbor cells to the current one.
				// the grid closes in itself due to the modulus operator
				neighbors.add(grid[Math.floorMod(i - 1, grid.length)][Math
						.floorMod(j - 1, grid[i].length)]);
				neighbors.add(grid[Math.floorMod(i - 1, grid.length)][j]);
				neighbors.add(grid[Math.floorMod(i - 1, grid.length)][Math
						.floorMod(j + 1, grid[i].length)]);
				neighbors.add(grid[i][Math.floorMod(j - 1, grid[i].length)]);
				neighbors.add(grid[i][Math.floorMod(j + 1, grid[i].length)]);
				neighbors.add(grid[Math.floorMod(i + 1, grid.length)][Math
						.floorMod(j - 1, grid[i].length)]);
				neighbors.add(grid[Math.floorMod(i + 1, grid.length)][j]);
				neighbors.add(grid[Math.floorMod(i + 1, grid.length)][Math
						.floorMod(j + 1, grid[i].length)]);

				for (int k = 0; k < neighbors.size(); k++)
					if (neighbors.get(k).compareTo(GameOfLifeConstants.LIFE) == 0)
						life_forms += 1;

				if (grid[i][j].compareTo(GameOfLifeConstants.DEATH) == 0) {
					// check if I can spawn a new cell
					if (life_forms == 3) {
						nextGenGrid[i][j] = GameOfLifeConstants.LIFE;
					}
				} else { // else current cell lives
					// check if cell must die of over-population or
					// under-population
					if (life_forms < 2 || life_forms > 3) {
						nextGenGrid[i][j] = GameOfLifeConstants.DEATH;
					}
				}
			}
		}
		return nextGenGrid;
	} 

}
