package com.nordea.gol.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.nordea.gol.constants.GameOfLifeConstants;
import com.nordea.gol.service.NextGenerationService;
import com.nordea.gol.utils.GameOfLifeUtils;

@Service
public class NextGenerationServiceImpl implements GameOfLifeConstants,NextGenerationService {

	private static final Logger LOGGER = LoggerFactory.getLogger(NextGenerationService.class);

	public String[][] nextGenerationMatrix(String[][] cellMatrix) {
		String[][] nextGenGrid = GameOfLifeUtils.copyGrid(cellMatrix);

		for (int i = 0; i < cellMatrix.length; i++) {
			for (int j = 0; j < cellMatrix[i].length; j++) {

				int countLiveNeighbours = 0;

				List<String> neighbors = new ArrayList<String>();

				// Find the neighbor cells to the current one.
				getNeighbourCells(cellMatrix, i, j, neighbors);

				
				// Count live neighbours
				for (int k = 0; k < neighbors.size(); k++)
					if (neighbors.get(k).compareTo(LIFE) == 0)
						countLiveNeighbours += 1;
				
				//use comparator

				if (cellMatrix[i][j].compareTo(DEATH) == 0) {
					// check if I can spawn a new cell
					if (life_forms == 3) {
						nextGenGrid[i][j] = LIFE;
					}
				} else { // else current cell lives
					// check if cell must die of over-population or
					// under-population
					if (life_forms < 2 || life_forms > 3) {
						nextGenGrid[i][j] = DEATH;
					}
				}
			}
		}
		return nextGenGrid;
	}

	private void getNeighbourCells(String[][] cellMatrix, int i, int j, List<String> neighbors) {
		neighbors.add(cellMatrix[Math.floorMod(i - 1, cellMatrix.length)][Math.floorMod(j - 1, cellMatrix[i].length)]);
		neighbors.add(cellMatrix[Math.floorMod(i - 1, cellMatrix.length)][j]);
		neighbors.add(cellMatrix[Math.floorMod(i - 1, cellMatrix.length)][Math.floorMod(j + 1, cellMatrix[i].length)]);
		neighbors.add(cellMatrix[i][Math.floorMod(j - 1, cellMatrix[i].length)]);
		neighbors.add(cellMatrix[i][Math.floorMod(j + 1, cellMatrix[i].length)]);
		neighbors.add(cellMatrix[Math.floorMod(i + 1, cellMatrix.length)][Math.floorMod(j - 1, cellMatrix[i].length)]);
		neighbors.add(cellMatrix[Math.floorMod(i + 1, cellMatrix.length)][j]);
		neighbors.add(cellMatrix[Math.floorMod(i + 1, cellMatrix.length)][Math.floorMod(j + 1, cellMatrix[i].length)]);
	}

}
