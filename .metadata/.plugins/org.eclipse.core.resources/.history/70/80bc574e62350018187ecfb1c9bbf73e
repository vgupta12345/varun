package com.nordea.gol;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.nordea.gol.constants.Constants;
import com.nordea.gol.service.NextGeneration;
import com.nordea.gol.utils.GameOfLifeUtils;

public class GameOfLife {

	public static void main(String... args) {

		NextGeneration nextGeneration = new NextGeneration();

		
		// create a scanner so we can read the command-line input
		Scanner scanner = new Scanner(System.in);
		// prompt for the number of rows
		System.out.print("Enter number of rows: ");
		// get their input as number of rows
		int numberOfRows = scanner.nextInt();
		// prompt for the number of columns
		System.out.print("Enter number of columns: ");
		// get their input as number of columns
		int numberOfcolumns = scanner.nextInt();
		// prompt for the max number of generations
		System.out.print("Enter maximum number of generations: ");
		// get their input as max number of generations
		int maxGeneration = scanner.nextInt();

		String[][] cellMatrix=null;
		int currentGeneration = 0;

		try {

			cellMatrix = GameOfLifeUtils.generateCellMatrix(numberOfRows, numberOfcolumns,
					GameOfLifeUtils.readInputFile());
		
		} catch (ArrayIndexOutOfBoundsException e) {
		System.out
				.println("Input parameters dont match file contents. Please specify right parameters");
	}
		

		while (null!= cellMatrix && currentGeneration < maxGeneration) {
			GameOfLifeUtils.printCellMatrix(cellMatrix);
			System.out.println("  Current generation   "
					+ (++currentGeneration));
			GameOfLifeUtils.clearScreen();

			String[][] nextGenGrid = nextGeneration.nextGen(cellMatrix);

			// copy grid with new generations to the one
			// previously created
			cellMatrix = GameOfLifeUtils.copyGrid(nextGenGrid);

			// wait 200 milliseconds before repeating the loop
			try {
				Thread.sleep(100);
			} catch (InterruptedException ex) {
				Thread.currentThread().interrupt();
			}
		}
	}





}